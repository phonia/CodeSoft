<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.OleDb" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>
<#@include file="E:\Code\CodeSoft\ERPS.Infrastructure\T4\MultipleOutputHelper.ttinclude"#>
<#@include file="E:\Code\CodeSoft\ERPS.Infrastructure\T4\T4CodeFirstHelper.ttinclude"#>
<#
			var manager = Manager.Create(Host, GenerationEnvironment);
			var properties=GetProperty(@"E:\Code\CodeSoft\数据原典.xls");
			var navigations=GetNavigation(@"E:\Code\CodeSoft\数据原典.xls");
			
            foreach (var node in properties)
            {
                if (String.IsNullOrWhiteSpace(node.ClassMapping)) continue;
                manager.StartNewFile(node.ClassName+".cs"); 
#>/***********************************************
* auto-generated code from T4
* 
* ********************************************/

using Infrastructure;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace ERPS.Models
{
<#
                if (node.ClassMapping.Equals("Enum"))
                {
#>
    /// <summary>
    /// <#=String.IsNullOrWhiteSpace(node.Description)?"":node.Description #>枚举
    /// </summary>
    public enum <#=node.ClassName #>
    {
<#
                    int count = 0;
                    foreach (var record in properties)
                    {
                        if (String.IsNullOrWhiteSpace(record.ClassMapping) && record.ClassName.Equals(node.ClassName))
                        {
                            if (count != 0)
                            {
                                
#>,
<#
                            }
#>
        [Description("<#=String.IsNullOrWhiteSpace(record.Description)?"":record.Description #>")]
        <#=record.PropertyName #><#  
                            count++;
                        }
                    }
#>

    }
}
<#
                    manager.EndBlock();
                    continue;
                }
                //根据实体的基类写入表头
                if (String.IsNullOrWhiteSpace(node.ClassBase))
                {
#>
    /// <summary>
    /// <#=String.IsNullOrWhiteSpace(node.Description)?"":node.Description #>
    /// <#=node.ClassName #> 实体类
    /// </summary>
    [Serializable]
    public partial class <#=node.ClassName #>:EntityBase,IAggregateRoot
    {
<#
                }
                else
                {
                    //code inherit from node.BaseClass
#>
    /// <summary>
    /// <#=String.IsNullOrWhiteSpace(node.Description)?"":node.Description #>
    /// <#=node.ClassName #> 实体类
    /// </summary>
    [Serializable]
    public partial class <#=node.ClassName #>:<#=node.ClassBase #>,IAggregateRoot
    {
<#

                }

                //循环写入类型属性
                foreach (var record in properties)
                {
                    //具有相同的类型名称、类型的映射基类为空的记录为类型的基本属性
                    if (record.ClassName.Equals(node.ClassName)
                        && String.IsNullOrWhiteSpace(record.ClassMapping))
                    {
#>
        /// <summary>
        /// <#=String.IsNullOrWhiteSpace(record.Description)?"":record.Description #>
        /// </summary>
        public <#=record.PropertyType #> <#=record.PropertyName #> {get;set;}

<#

                    }
                }

                foreach (var record in navigations)
                {
                    if (record.MainClassName != null && record.MainClassName.Equals(node.ClassName))
                    {
#>
        ///<summary>
        ///<#=String.IsNullOrWhiteSpace(record.Description)?"":record.Description #>
        ///</summary>
        public virtual IList<<#=record.FKClassName #>> <#=record.MainClassProperty #>{get;set;}

<#
                    }

                    if (record.FKClassName != null && record.FKClassName.Equals(node.ClassName))
                    {
                        if (record.RelationShip.Equals("*"))
                        {
#>
        ///<summary>
        ///<#=String.IsNullOrWhiteSpace(record.Description)?"":record.Description #>
        ///</summary>
        public virtual IList<<#=record.MainClassName #>> <#=record.FKPropertyName #>{get;set;}

<#
                        }
                        else
                        {
#>
        ///<summary>
        ///<#=String.IsNullOrWhiteSpace(record.Description)?"":record.Description #>
        ///</summary>
        public virtual <#=record.MainClassName #> <#=record.FKPropertyName #>{get;set;}

<#
                        }
                    }
                }
#>
        protected override void Validate()
        {
            throw new NotImplementedException();
        }
    }
}
<#
				manager.EndBlock();
            }
            manager.Process(true);
#>