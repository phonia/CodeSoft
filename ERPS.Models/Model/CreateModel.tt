<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.OleDb" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>
<#@include file="E:\Code\CodeSoft\ERPS.Models\Model\MultipleOutputHelper.ttinclude"#>
<#
			var manager = Manager.Create(Host, GenerationEnvironment); 
            List<EntityExcelRecord> list = new List<EntityExcelRecord>();
            ArrayList tableList = GetExcelTables(@"E:\Code\模型设计.xls");
            foreach (var item in tableList)
            {
                DataTable table = InputFromExcel(@"E:\Code\模型设计.xls", item.ToString());
                for (int i = 0; i < table.Rows.Count; i++)
                {
                    EntityExcelRecord record = new EntityExcelRecord();
                    record.ClassName = table.Rows[i]["类型名"] is DBNull ? String.Empty : table.Rows[i]["类型名"].ToString();
                    record.BaseClass = table.Rows[i]["基类"] is DBNull ? String.Empty : table.Rows[i]["基类"].ToString();
                    record.MappingClass = table.Rows[i]["映射类型"] is DBNull ? String.Empty : table.Rows[i]["映射类型"].ToString();
                    record.TableName = table.Rows[i]["所属表"] is DBNull ? String.Empty : table.Rows[i]["所属表"].ToString();
                    record.PropertyName = table.Rows[i]["字段名称"] is DBNull ? String.Empty : table.Rows[i]["字段名称"].ToString();
                    record.PropertyType = table.Rows[i]["属性类型"] is DBNull ? String.Empty : table.Rows[i]["属性类型"].ToString();
                    record.FieldType = table.Rows[i]["字段类型"] is DBNull ? String.Empty : table.Rows[i]["字段类型"].ToString();
                    record.MaxLength = table.Rows[i]["最大长度"] is DBNull ? null : (int?)Convert.ToInt16(table.Rows[i]["最大长度"]);
                    record.Decimal = table.Rows[i]["小数位数"] is DBNull ? null : (int?)Convert.ToInt16(table.Rows[i]["小数位数"]);
                    record.IsKey = table.Rows[i]["主键"] is DBNull ? false : true;
                    record.IsMultiPK=table.Rows[i]["复合主键"] is DBNull?false:true; 
                    record.IsNull = table.Rows[i]["允许空"] is DBNull ? true : false;
                    record.IsIdentity=table.Rows[i]["自增长"] is DBNull?false:true;
                    record.DefaultValue = table.Rows[i]["默认值"] is DBNull ? String.Empty : table.Rows[i]["默认值"].ToString();
                    record.Description = table.Rows[i]["字段说明"] is DBNull ? String.Empty : table.Rows[i]["字段说明"].ToString();
                    record.RefrenceClassName = table.Rows[i]["参考类型"] is DBNull ? String.Empty : table.Rows[i]["参考类型"].ToString();
                    record.RefrencePropertyName = table.Rows[i]["参考属性"] is DBNull ? String.Empty : table.Rows[i]["参考属性"].ToString();
                    record.RefrenceRelation = table.Rows[i]["类型关系"] is DBNull ? String.Empty : table.Rows[i]["类型关系"].ToString();
                    list.Add(record);
                }
            }

			//Entity.tt
            foreach (var node in list)
            {
                if (String.IsNullOrWhiteSpace(node.MappingClass)) continue;
                //code
				manager.StartNewFile(node.ClassName+".cs"); 
		#>
#region
/***********************************************
 * 
 * 
 * ********************************************/
#endregion

using Infrastructure;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace ERPS.Models
{
<#
                if (String.IsNullOrWhiteSpace(node.BaseClass))
                {
                    //code inherit from object
#>
    /// <summary>
    /// <#=node.ClassName #>表实体类
    /// </summary>
	[Serializable]
    public partial class <#=node.ClassName #>:EntityBase,IAggregateRoot
    {
<#
                }
                else
                {
                    //code inherit from node.BaseClass
#>
    /// <summary>
    /// <#=node.ClassName #>表实体类
    /// </summary>
	[Serializable]
    public partial class <#=node.ClassName #>:<#=node.BaseClass #>,IAggregateRoot
    {

<#
                }

                foreach (var record in list)
                {
                    if (record.ClassName.Equals(node.ClassName)
                        && String.IsNullOrWhiteSpace(record.MappingClass)
						&&String.IsNullOrWhiteSpace(record.RefrenceClassName))
                    {
                        //code primitive property
#>
		/// <summary>
		/// <#=record.Description??"" #>
		/// </summary>
		public <#=record.PropertyType #> <#=record.PropertyName #> {get;set;}
		 
<#
                    }

                    if (record.ClassName.Equals(node.ClassName)
                        && String.IsNullOrWhiteSpace(record.MappingClass)
                        && !String.IsNullOrWhiteSpace(record.RefrenceClassName))
                    {
                        //code self-navigation property
                        if (String.IsNullOrWhiteSpace(record.RefrencePropertyName))
                        {
#>
		///<summary>
		///<#=record.Description #>
		///</summary>
		public virtual IList<<#=record.PropertyType #>> <#=record.PropertyName #>s{get;set;}

<#  
						}
                        else
                        {
#>
		/// <summary>
		/// <#=record.Description??"" #>
		/// </summary>
		public <#=record.PropertyType #> <#=record.PropertyName #> {get;set;}
		 
<# 
						}
                    }
                }

				foreach(var record in list)
				{
					if (!String.IsNullOrWhiteSpace(record.RefrenceClassName)
						&&!String.IsNullOrWhiteSpace(record.RefrencePropertyName)
                        &&record.RefrenceClassName.Equals(node.ClassName)
                        && String.IsNullOrWhiteSpace(record.MappingClass))
                    {
                        //code navigation proper
						if (record.RefrenceRelation.Equals("*"))
                        {
#>
		///<summary>
		///<#=record.Description #>
		///</summary>
		public virtual IList<<#=record.ClassName #>> <#=record.ClassName #>s{get;set;}

<# 
						}
                        if (record.RefrenceRelation.Equals("N"))
                        {
#>
		///<summary>
		///<#=record.Description #>
		///</summary>
		public virtual IList<<#=record.ClassName #>> <#=record.ClassName #>s{get;set;}

<# 
						}
                        if (record.RefrenceRelation.Equals("1"))
                        {}
                        if (record.RefrenceRelation.Equals("0..1"))
                        { }
                    }
				}

#>

		protected override void Validate()
        {
            throw new NotImplementedException();
        }
	}
}
<#
				manager.EndBlock();
            }
			manager.Process(true);
#>



<#+
        /// <summary>  
        /// 获取Excel文件数据表列表  
        /// </summary>  
        public  ArrayList GetExcelTables(string ExcelFileName)  
        {  
            DataTable dt = new DataTable();  
            ArrayList TablesList = new ArrayList();  
            if (File.Exists(ExcelFileName))  
            {  
                using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=Excel 8.0;Data Source=" + ExcelFileName))  
                {  
                    try  
                    {  
                        conn.Open();  
                        dt = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, new object[] { null, null, null, "TABLE" });  
                    }  
                    catch (Exception exp)  
                    {  
                        throw exp;  
                    }  
  
                    //获取数据表个数  
                    int tablecount = dt.Rows.Count;  
                    for (int i = 0; i < tablecount; i++)  
                    {  
                        string tablename = dt.Rows[i][2].ToString().Trim().TrimEnd('$');  
                        if (TablesList.IndexOf(tablename) < 0)  
                        {  
                            TablesList.Add(tablename);  
                        }  
                    }  
                }  
            }  
            return TablesList;  
        }  


		        /// <summary>  
        /// 将Excel文件导出至DataTable(第一行作为表头)  
        /// </summary>  
        /// <param name="ExcelFilePath">Excel文件路径</param>  
        /// <param name="TableName">数据表名，如果数据表名错误，默认为第一个数据表名</param>  
        public  DataTable InputFromExcel(string ExcelFilePath, string TableName)  
        {  
            if (!File.Exists(ExcelFilePath))  
            {  
                throw new Exception("Excel文件不存在！");  
            }  
  
            //如果数据表名不存在，则数据表名为Excel文件的第一个数据表  
            ArrayList TableList = new ArrayList();  
            TableList = GetExcelTables(ExcelFilePath);  
  
            if (TableList.IndexOf(TableName) < 0)  
            {  
                TableName = TableList[0].ToString().Trim();  
            }  
  
            DataTable table = new DataTable();  
            OleDbConnection dbcon = new OleDbConnection(@"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ExcelFilePath + ";Extended Properties=Excel 8.0");  
            OleDbCommand cmd = new OleDbCommand("select * from [" + TableName + "$]", dbcon);  
            OleDbDataAdapter adapter = new OleDbDataAdapter(cmd);  
  
            try  
            {  
                if (dbcon.State == ConnectionState.Closed)  
                {  
                    dbcon.Open();  
                }  
                adapter.Fill(table);  
            }  
            catch (Exception exp)  
            {  
                throw exp;  
            }  
            finally  
            {  
                if (dbcon.State == ConnectionState.Open)  
                {  
                    dbcon.Close();  
                }  
            }  
            return table;  
        }  


    public class EntityExcelRecord
    {
        public String ClassName { get; set; }
        public String BaseClass { get; set; }
        public String MappingClass { get; set; }
        public String TableName { get; set; }
        public String PropertyName { get; set; }
        public String PropertyType { get; set; }
        public String FieldType { get; set; }
        public int? MaxLength { get; set; }
        public int? Decimal { get; set; }
        public bool IsKey { get; set; }
        public bool IsMultiPK { get; set; }
        public bool IsNull { get; set; }
        public bool IsIdentity { get; set; }
        public String DefaultValue { get; set; }
        public String Description { get; set; }
        public String RefrenceClassName { get; set; }
        public String RefrencePropertyName { get; set; }
        public String RefrenceRelation { get; set; }
    }
#>