<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.OleDb" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>
<#@include file="E:\Code\CodeSoft\ERPS.Infrastructure\T4\MultipleOutputHelper.ttinclude"#>
<#@include file="E:\Code\CodeSoft\ERPS.Infrastructure\T4\T4CodeFirstHelper.ttinclude"#>
<#
			var properties=GetProperty(@"E:\Code\CodeSoft\数据原典.xls");
			var navigations=GetNavigation(@"E:\Code\CodeSoft\数据原典.xls");
			var manager = Manager.Create(Host, GenerationEnvironment); 
            foreach (var node in properties)
            {
                if (String.IsNullOrWhiteSpace(node.ClassMapping)||node.ClassMapping.Equals("Enum")) continue;
                manager.StartNewFile(node.ClassName+".cs");
#>/***********************************************
* auto-generated code from T4
* 
* ********************************************/

using ERPS.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;

namespace EPRS.Repository
{
    ///<summary>
    ///<#=node.ClassName #> 实体类映射
    ///<#=String.IsNullOrWhiteSpace(node.Description)?"":node.Description #>
    ///</summary>
    public class <#=node.ClassName #>Configuration:<#=node.ClassMapping #>Configuration<<#=node.ClassName #>>
    {
        public <#=node.ClassName #>Configuration()
        {
<#
                int count = 0;
                foreach (var record in properties)
                {
                    if (String.IsNullOrWhiteSpace(record.ClassMapping)
                        &&!String.IsNullOrWhiteSpace(record.TableName)
                        && record.ClassName.Equals(node.ClassName))
                    {
                        if (record.IsMultiKey&&record.IsKey)
                        {
                            if (count <= 0)
                            {
#>, k.<#=record.PropertyName #><#
                            }
                            else
                            {
#>
            ToTable("<#=record.TableName #>");
            HasKey(k => new { k.<#=record.PropertyName #><#
                            }
                            count++;
                        }
                        if (!record.IsMultiKey&&record.IsKey)
                        {
#>
            ToTable("<#=record.TableName #>");
            HasKey(e=>e.<#=record.PropertyName #>);
<#
                        }
                    }
                }
                if (count > 0)
                {
#> });
<#
                }

                foreach (var record in properties)
                {
                    if (String.IsNullOrWhiteSpace(record.ClassMapping)
                        && record.ClassName.Equals(node.ClassName)
                        &&!String.IsNullOrWhiteSpace(record.FieldType))
                    {
#>
            Property(e =>e.<#=record.PropertyName #>).HasColumnName("<#=record.PropertyName #>")<#
                        if (record.IsIdentity)
                        {
#>.HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)<#
                        }
                        if (record.pricison > 0)
                        { }
                        if (!String.IsNullOrWhiteSpace(record.Description))
                        { }
                        if (record.MaxLength > 0)
                        {
                            #>.HasMaxLength(<#=record.MaxLength #>)<#
                        }
                        if (!String.IsNullOrWhiteSpace(record.FieldType))
                        {
                            #>.HasColumnType("<#=record.FieldType #>")<#
                        }
                        if (record.IsNull)
                        {
                            #>.IsOptional()<# 
                        }
                        else
                        {
                            #>.IsRequired()<#
                        }
                        //特殊属性byte[] RowVersion
                        if (record.PropertyName.Equals("RowVersion"))
                        {
                            #>.IsRowVersion()<# 
                        }
                        #>;
<#
                    }
                }

                foreach (var record in navigations)
                {
                    if (record.FKClassName.Equals(node.ClassName))
                    {
                        if (record.RelationShip.Equals("o"))
                        {
#>
            HasOptional(e=>e.<#=record.FKPropertyName #>).WithMany(e=>e.<#=record.MainClassProperty #>).Map(e=>e.MapKey("<#=record.FKPropertyName #>Id"));
<#
                        }
                        if (record.RelationShip.Equals("l"))
                        {
#>
            HasRequired(e=>e.<#=record.FKPropertyName #>).WithMany(e=>e.<#=record.MainClassProperty #>).Map(e=>e.MapKey("<#=record.FKPropertyName #>Id"));
<#
                        }
                        if (record.RelationShip.Equals("*"))
                        {
#>
            HasMany(e => e.<#=record.FKPropertyName #>s).WithMany(e=>e.<#=record.MainClassProperty #>);
<#
                        }
                    }
                }
#>

        }
    }
}
<#
                manager.EndBlock();
            }
            manager.Process(true);
#>



