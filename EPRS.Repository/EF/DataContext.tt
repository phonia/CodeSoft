<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.OleDb" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>
<#@include file="E:\Code\CodeSoft\ERPS.Infrastructure\T4\MultipleOutputHelper.ttinclude"#>
<#@include file="E:\Code\CodeSoft\ERPS.Infrastructure\T4\T4CodeFirstHelper.ttinclude"#>
<#
			var list=GetProperty(@"E:\Code\CodeSoft\数据原典.xls");
 #>
/***********************************************
 * auto-generated code from T4
 * 
 * ********************************************/



using ERPS.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;

namespace EPRS.Repository
{
    public class DataContext:DbContext,IDisposable
    {

        public DataContext() : base("DataContext") { 
			base.Configuration.LazyLoadingEnabled = false;
		}

        public DataContext(String connectionStrings) : base(connectionStrings) { }
<#
             
            foreach (var record in list)
            {
                if (record.ClassMapping.Equals("EntityType"))
                {
#>
        ///<summary>
        ///<#=String.IsNullOrWhiteSpace(record.Description)?"":record.Description #>
        ///</summary>
        public DbSet<<#=record.ClassName #>> <#=record.ClassName #>Sets { get; set; }

<#
                }
            }
#>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
			//Database.Delete("DataContext");
<#
            foreach (var record in list)
            {
                if (record.ClassMapping.Equals("EntityType")
                    || record.ClassMapping.Equals("ComplexType"))
                {
#>
            modelBuilder.Configurations.Add(new <#=record.ClassName #>Configuration());
<#
                }
            }
#>
            Database.SetInitializer(new DropCreateDatabaseIfModelChanges<DataContext>());
        }

        public static void InitDataBase()
        {
            Database.SetInitializer(new DropCreateDatabaseIfModelChanges<DataContext>());
        }
    }
}