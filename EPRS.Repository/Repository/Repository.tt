<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.OleDb" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>
<#@include file="E:\Code\CodeSoft\ERPS.Infrastructure\T4\MultipleOutputHelper.ttinclude"#>
<#@include file="E:\Code\CodeSoft\ERPS.Infrastructure\T4\T4CodeFirstHelper.ttinclude"#>
<#
			var manager = Manager.Create(Host, GenerationEnvironment);
			var properties=GetProperty(@"E:\Code\CodeSoft\数据原典.xls");
			var navigations=GetNavigation(@"E:\Code\CodeSoft\数据原典.xls");
			            foreach (var record in properties)
            {
                if (String.IsNullOrWhiteSpace(record.ClassMapping)) continue;
                PropertyRecord key = null;
                foreach (var node in properties)
                {
                    if (node.ClassName.Equals(record.ClassName) && node.IsKey)
                        key = node;
                }
                if (key == null) continue;

                manager.StartNewFile(key.ClassName + ".cs"); 
#>/*******************************************
* auto-generated code from T4
* 
* ********************************************/

using ERPS.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace EPRS.Repository
{
    ///<summary>
    ///<#=record.ClassName #> 仓储类
    ///</summary>
    public partial class <#=record.ClassName #>Repository:EFRepository<<#=record.ClassName #>,<#=key.PropertyType #>>,I<#=record.ClassName #>Repository
    {
        public override void RemoveCascaded(<#=record.ClassName #> entity)
        {
            
        }

        public override void RemoveCascaded(<#=key.PropertyType #> id)
        {
            
        }
    }
}
<#
                manager.EndBlock();
            }
            manager.Process(true);
#>